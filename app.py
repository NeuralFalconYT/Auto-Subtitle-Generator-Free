import gradio as gr
from subtitle import subtitle_maker,LANGUAGE_CODE
source_lang_list = ['Automatic', "English", "Hindi", "Bengali"]
available_language = LANGUAGE_CODE.keys()
source_lang_list.extend(available_language)

target_lang_list = ["English", "Hindi", "Bengali"]
target_lang_list.extend(available_language)


def update_target_lang(selected_src):
    """Update target language automatically when source changes."""
    if selected_src == "Automatic":
        return "English"
    else:
        return selected_src


def ui1():
    with gr.Blocks() as demo:
        gr.Markdown("<center><h1 style='font-size: 32px;'>🎬 Auto Subtitle Generator</h1></center>")
        gr.Markdown("**Note**: If you have a large video, upload the audio instead, it's much faster to upload.")


        with gr.Row():
            with gr.Column():
                upload_media = gr.File(label="Upload Audio or Video File")
                input_lang = gr.Dropdown(label="Source Language", choices=source_lang_list, value="English")
                generate_btn = gr.Button("🚀 Generate Subtitle", variant="primary")
                with gr.Accordion("⚙️ Translation", open=False):
                    output_lang = gr.Dropdown(label="Translate Into", choices=target_lang_list, value="English")

            with gr.Column():
              default_srt   = gr.File(label="🎯 Original Subtitles (Default Generated by whisper)")
              customized_srt = gr.File(label="📝 Readable Subtitles (Multi-line)")
              word_level_srt = gr.File(label="🔠 Word-by-Word Subtitles")

              with gr.Accordion("🌍 Other Subtitle Formats", open=False):
                  translated_srt = gr.File(label="🌐 Translated Subtitles")
                  shorts_srt     = gr.File(label="📱 Shorts/Reels Subtitles")
                  transcript_txt = gr.File(label="📄 Full Transcript (Text File)")
                  transcript_box = gr.Textbox(label="🗒️ Transcript Preview", lines=3)

        generate_btn.click(
            fn=subtitle_maker,
            inputs=[upload_media, input_lang, output_lang],
            outputs=[default_srt, translated_srt, customized_srt, word_level_srt, shorts_srt, transcript_txt, transcript_box]
        )

        input_lang.change(
            fn=update_target_lang,
            inputs=input_lang,
            outputs=output_lang
        )

        # Add example runs (optional)
        # gr.Examples(
        #     examples=[
        #         ["sample.mp3", "English", "English"],
        #         ["sample.wav", "English", "Hindi"],
        #     ],
        #     inputs=[upload_media, input_lang, output_lang]
        # )

    return demo

import click
@click.command()
@click.option("--debug", is_flag=True, default=False, help="Enable debug mode.")
@click.option("--share", is_flag=True, default=False, help="Enable sharing of the interface.")
def main(share,debug):
# def main(debug=True, share=True): 
  demo = ui1()
  demo.queue().launch(share=share,debug=debug)
if __name__ == "__main__":
    main()    
